
using System.Text.Json;

namespace Reddit_app
{
    internal class RedditModel
    {
        private RedditModel() { }
       
        public static RedditModel instance  { get { return Nested.instance; } }
        private class Nested
        {   
            static Nested() { }
            internal static readonly RedditModel instance = new RedditModel();
        }


        private List<RedditUser> users = new List<RedditUser>();
        private List<RedditPost> posts = new List<RedditPost>();

        private const string UsersFile = "users.json";
        private const string PostsFile = "posts.json";
        private void SaveUsers()
        {
            File.WriteAllText(UsersFile, JsonSerializer.Serialize(users, new JsonSerializerOptions { WriteIndented = true }));
        }

        private void SavePosts()
        {
            File.WriteAllText(PostsFile, JsonSerializer.Serialize(posts, new JsonSerializerOptions { WriteIndented = true }));
        }

        public void LoadData()
        {
            if (File.Exists(UsersFile))
            {
                var json = File.ReadAllText(UsersFile);
                users = JsonSerializer.Deserialize<List<RedditUser>>(json) ?? new List<RedditUser>();
            }

            if (File.Exists(PostsFile))
            {
                var json = File.ReadAllText(PostsFile);
                posts = JsonSerializer.Deserialize<List<RedditPost>>(json) ?? new List<RedditPost>();
            }
        }


        public RedditUser GetRedditUserByUsername(string username)
        {
            return users.FirstOrDefault(u => u.username == username);
            //users.OrderBy(u => u.username).ToList();
        }
        public bool AddNewUser(string username, string pass)
        {   if(GetRedditUserByUsername(username)!=null) {return false;}
            users.Add(new RedditUser(username, pass));
            SaveUsers(); 
            return true;
        } 
        public void DeleteUser(RedditUser u)
        {
            users.Remove(u);
            SaveUsers();
        }

      
        public List<RedditPost> GetAllPosts()
        {
            return posts;
        }
        public List<RedditPost> GetPostsByUser(string username)
        {
            return posts.Where(p => p.author == username).ToList();
        }
        public void AddPost(RedditPost post)
        {
            posts.Add(post);
            SavePosts();
        }
        public void RemovePost(RedditPost post)
        {
            posts.Remove(post);
            SavePosts();
        }
        public void UpdatePost(RedditPost post, string newTitle, string newContent)
        {
            post.title = newTitle;
            post.content = newContent;
            SavePosts();
        }
        
    }


}
